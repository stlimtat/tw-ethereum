// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/tw-ethereum/pkg/ethereum (interfaces: IParser)
//
// Generated by this command:
//
//	mockgen -destination=parser_mock.go -package=ethereum . IParser
//

// Package ethereum is a generated GoMock package.
package ethereum

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIParser is a mock of IParser interface.
type MockIParser struct {
	ctrl     *gomock.Controller
	recorder *MockIParserMockRecorder
	isgomock struct{}
}

// MockIParserMockRecorder is the mock recorder for MockIParser.
type MockIParserMockRecorder struct {
	mock *MockIParser
}

// NewMockIParser creates a new mock instance.
func NewMockIParser(ctrl *gomock.Controller) *MockIParser {
	mock := &MockIParser{ctrl: ctrl}
	mock.recorder = &MockIParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParser) EXPECT() *MockIParserMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockIParser) GetBalance(ctx context.Context, address string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, address)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIParserMockRecorder) GetBalance(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIParser)(nil).GetBalance), ctx, address)
}

// GetCurrentBlock mocks base method.
func (m *MockIParser) GetCurrentBlock(ctx context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBlock", ctx)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCurrentBlock indicates an expected call of GetCurrentBlock.
func (mr *MockIParserMockRecorder) GetCurrentBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBlock", reflect.TypeOf((*MockIParser)(nil).GetCurrentBlock), ctx)
}

// GetTransactions mocks base method.
func (m *MockIParser) GetTransactions(ctx context.Context, address string) ([]Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, address)
	ret0, _ := ret[0].([]Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockIParserMockRecorder) GetTransactions(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockIParser)(nil).GetTransactions), ctx, address)
}

// Subscribe mocks base method.
func (m *MockIParser) Subscribe(ctx context.Context, address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIParserMockRecorder) Subscribe(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIParser)(nil).Subscribe), ctx, address)
}
