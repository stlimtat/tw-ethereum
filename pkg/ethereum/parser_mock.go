// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/tw-ethereum/pkg/ethereum (interfaces: Parser)
//
// Generated by this command:
//
//	mockgen -destination=parser_mock.go -package=ethereum . Parser
//

// Package ethereum is a generated GoMock package.
package ethereum

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
	isgomock struct{}
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// GetCurrentBlock mocks base method.
func (m *MockParser) GetCurrentBlock() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBlock")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCurrentBlock indicates an expected call of GetCurrentBlock.
func (mr *MockParserMockRecorder) GetCurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBlock", reflect.TypeOf((*MockParser)(nil).GetCurrentBlock))
}

// GetTransactions mocks base method.
func (m *MockParser) GetTransactions(address string) []Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", address)
	ret0, _ := ret[0].([]Transaction)
	return ret0
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockParserMockRecorder) GetTransactions(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockParser)(nil).GetTransactions), address)
}

// Subscribe mocks base method.
func (m *MockParser) Subscribe(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockParserMockRecorder) Subscribe(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockParser)(nil).Subscribe), address)
}
